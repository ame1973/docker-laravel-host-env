# Load headers related module
load_module modules/ngx_http_headers_more_filter_module.so;
load_module modules/ngx_http_security_headers_module.so;
load_module modules/ngx_http_geoip2_module.so;

user  nginx;

# Based on your CPU cores
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  2048;

    # Optimize to serve many clients with each thread, essential for linux
    use epoll;

    # Accept as many connections as possible, may flood worker connections if set too low
    multi_accept on;
}


http {
    # Enable security headers
    security_headers on;

    # Remove etag header
    etag off;

    ## Hide Nginx version ##
    server_tokens   off;


    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    map $http_x_forwarded_for $realip {
            ~^(\d+\.\d+\.\d+\.\d+) $1;
            default $remote_addr;
    }

    include /etc/nginx/geoip_cloudflare.conf;
    geoip2_proxy_recursive on;

    geoip2 /opt/GeoLite2-Country.mmdb {
      $geoip2_metadata_country_build metadata build_epoch;
      $geoip2_country_code source=$realip country names en;
    }

    geoip2 /opt/GeoLite2-City.mmdb {
      $geoip2_data_country_name source=$realip country names en;
      $geoip2_data_country_code default=HK source=$realip country iso_code;
      $geoip2_data_city_name source=$realip city names en;
      $geoip2_data_province_name source=$realip subdivisions 0 names en;
      $geoip2_data_province_isocode source=$realip subdivisions 0 iso_code;
      $geoip2_continent_code source=$realip continent code;
      $geoip2_data_time_zone source=$realip location time_zone;
    }

    log_format json_analytics escape=json '{'
            '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
            '"connection": "$connection", ' # connection serial number
            '"connection_requests": "$connection_requests", ' # number of requests made in connection
            '"pid": "$pid", ' # process pid
            '"request_id": "$request_id", ' # the unique request id
            '"request_length": "$request_length", ' # request length (including headers and body)
            '"remote_addr": "$remote_addr", ' # client IP
            '"remote_user": "$remote_user", ' # client HTTP username
            '"remote_port": "$remote_port", ' # client port
            '"time_local": "$time_local", '
            '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
            '"request": "$request", ' # full path no arguments if the request
            '"request_uri": "$request_uri", ' # full path and arguments if the request
            '"args": "$args", ' # args
            '"status": "$status", ' # response status code
            '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
            '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
            '"http_referer": "$http_referer", ' # HTTP referer
            '"http_user_agent": "$http_user_agent", ' # user agent
            '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
            '"real_ip": "$realip",' # real ip
            '"http_host": "$http_host", ' # the request Host: header
            '"server_name": "$server_name", ' # the name of the vhost serving the request
            '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
            '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
            '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
            '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
            '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
            '"upstream_response_length": "$upstream_response_length", ' # upstream response length
            '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
            '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
            '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
            '"scheme": "$scheme", ' # http or https
            '"request_method": "$request_method", ' # request method
            '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
            '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
            '"gzip_ratio": "$gzip_ratio", '
            '"http_cf_ray": "$http_cf_ray", '
            '"geoip_country_code": "$geoip2_data_country_code",'
            '"geoip_country_name": "$geoip2_data_country_name",'
            '"geoip_city": "$geoip2_data_city_name",'
            '"geoip_timezone": "$geoip2_data_time_zone"'
        '}';

    error_log /dev/stdout;
    access_log /dev/stdout json_analytics;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

#    access_log  /var/log/nginx/access.log  main;

    keepalive_timeout  65;

# Cache informations about FDs, frequently accessed files
    # Have to test these values on your own server to find the best one
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Copy data between one FD and other from within the kernel (faster than read() + write())
    sendfile on;

    # Send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # Reduce the data that needs to be sent over network
    gzip on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    # Allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    ################################################################
    #
    # Simple DDoS Defense
    #
    ################################################################

    # Limit the number of connections per single IP
    # limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Limit the number of requests for a given session
    # limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

    # Zone which we want to limit by upper values, we want limit whole server
    # server {
    #     limit_conn conn_limit_per_ip 10;
    #     limit_req zone=req_limit_per_ip burst=10 nodelay;
    # }

    # If the request body size is more than the buffer size, then the entire (or partial)
    # Request body is written into a temporary file
    # client_body_buffer_size  128k;

    # Buffer size for reading client request header
    # client_header_buffer_size 3m;

    # Maximum number and size of buffers for large headers to read from client request
    # large_client_header_buffers 4 256k;

    # How long to wait for the client to send a request header
    # client_header_timeout 3m;

    include /etc/nginx/conf.d/*.conf;
}